一、作为值的函数
    scala中函数是最大公民，你可以在变量中存放函数
	_将ceil方法转成了函数。在scala中，你无法直接操作方法，而只能操作函数。
	val num = 3.1415
    val fun = ceil  _
	fun(num)
二、匿名函数
    scala不是每个函数都序号函数名字
	val triple = （x：Double） => 3 * x
三、带函数参数的函数
    （参数类型) => 结果类型
    valueAtOneQuater 需要一个转入double值，输出double值的函数
    def valueAtOneQuater (f: (Double) => Double, num: Double): Unit = {
        val num2 = f(num)
        println("fun %f".format(num2))
    }
	
	val fun = 3 * _ //未指定类型
	val fun = 3 * (_: Double)// ok
	val fun:(Double) => Double = 3 * _ //ok
	
	(0 to 9).map( "*" * _).foreach(println)
	
	reduceLeft
	(1 to 5).reduceLeft(_ * _) // == 1 * 2 * 3 * 4 *５　_ * _ 每个下划线代表一个参数
四、柯里化指的是将原来接受两个参数的函数变成新的接受一个参数的函数的过程。新的函数返回一个以原有第二个参数作为参数的函数。
    def mulBy (factor: Double) = (x: Double) => factor * x
	mulBy返回的是一个函数
	val triple = mulBy _
    triple(3)(2) //等于6.0
	
	例子：
	  def until (condition: => Boolean)(block: => Unit): Unit = {
        if (!condition) {
            block
            until(condition)(block)
        }
    }
	
	 until(xx == 0) {
            xx -= 1
            println(xx)
        }
五、模式匹配和样例类
    1. scala中 match表达式是一个更好的switch用例如下：
	match {case .. case _ }
	2. 
	case class Article（desc: String, price: Double) extends Item
	case class Bundle(desc: String, discount: Double， items: Item*)extends Item
	case Bundle(_,_,Article(descr,_),_*) => ..
	上述代码将descr绑定到Bundle的第一个Article的描述中。
	你也可以用@表示法将嵌套的值绑定到变量
	 case Bundle(_,_,art @ Article(descr,_),rest @ _*) => ..
	 这样子一来art就是Bundle中的第一个Article，而rest则是剩余的Item的序列。
六、类型参数
    scala中，你可以用类型参数来实现类和函数，这样子的类和函数可以用于多种类型。列如：Array[T]
	1. 泛型类
	case class Pair[A,B](val first: A, val second: B)
	new Pair（42， “String”)这里就是Pair[Int, String]
	2. 泛型函数
	函数和方法也是可以带类型参数。和泛型类一样，你需要把类型参数放到方法名之后。
	def getMinddle[T] (a: Array[T]) = a(a.length/2)
	3、类型变量定界
	class Pair[T](val first: T, val second: T) {
    def smaller = if (first.compareTo(second) < 0) first else second //错误，无法识别是否存在compareTo的方法。，我们可以添加一个上界 T<:Comparable[T]
    }
	如下：
	class Pair[T <: Comparable[T]](val first: T, val second: T) {
    def smaller = if (first.compareTo(second) < 0) first else second
	}
	下界用 >: 表示
	4、视图定界
	<% 关系意味着T可以别隐式转换成Comparable[T]
	class Pair[T <% Comparable[T]](val first: T, val second: T) {
    def smaller = if (first.compareTo(second) < 0) first else second
    }
	class Pair2[T <% Ordered[T]](val first: T, val second: T) {
    def smaller = if (first < second) first else second
    }
	5、上下文界定的形式为T:M， 其中M是另一个泛型类，它要求必须存在一个类型为M【T】的“隐式值”。
    class Pair3[T : Ordering ](val first: T, val second: T) {
    def smaller (implicit  ordering: Ordering[T]) = if (ordering.compare(first,second) < 0) first else second
    }
	6、manifest上下文定界
	要实例化一个泛型的Array[T]，我们需要Manifest【T】对象。要想让基本类型的数组能正常工作的话，这是必须要的。列举，如果T是Int，你会希望虚拟机中是一个Int[]数组。
	def makePiar[T: Manifest] (first: T, second: T) = {
        val r = new Array[T](2)
        r(0) = first; r(1) = second
        r
    }
	7、度重定界
	T >: Lower <: Upper
	T <: Comparable[T] with Serializable with Cloneable
	T <% Comparable[T] <% String
	T : Ordering : Manifest
	
	8、类型约束
	类型约束提供的是另一个限定的类型的方式，总三种关系
	T =:= U
	T <:< U
	T <%< U
	这些约束将会测试T是否等于U，是否为U的子类型， 或者能否被视图（隐式）转换为U。
	 
	 
